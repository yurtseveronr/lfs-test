name: Build and Push Docker Images to ECR

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}
  AWS_ACCOUNT_ID: '708778582346'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: authentication-service
            path: services/authentication-service/codebase
            dockerfile: services/authentication-service/codebase/Dockerfile
            ecr_repo: authentication-service
          - name: user-service
            path: services/user-service
            dockerfile: services/user-service/Dockerfile
            ecr_repo: user-service
          - name: movies-service
            path: services/movie-service/movie-service
            dockerfile: services/movie-service/movie-service/Dockerfile
            ecr_repo: movies-service
          - name: series-service
            path: services/series-service/series-service
            dockerfile: services/series-service/series-service/Dockerfile
            ecr_repo: series-service
          - name: search-service
            path: services/search-service
            dockerfile: services/search-service/Dockerfile
            ecr_repo: search-service
          - name: frontend-service
            path: services/frontend
            dockerfile: services/frontend/Dockerfile
            ecr_repo: frontend-service
          - name: chatbot-service
            path: services/bedrock_backend
            dockerfile: services/bedrock_backend/Dockerfile
            ecr_repo: chatbot-service
          - name: personalize-service
            path: services/machine_learning_service
            dockerfile: services/machine_learning_service/Dockerfile
            ecr_repo: personalize-service
          - name: producer-service
            path: services/kinesis-producer
            dockerfile: services/kinesis-producer/Dockerfile
            ecr_repo: producer-service
          - name: consumer-service
            path: services/kinesis-consumer
            dockerfile: services/kinesis-consumer/Dockerfile
            ecr_repo: consumer-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::708778582346:role/onur-github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service.ecr_repo }}
          IMAGE_TAG: latest
        run: |
          echo "Building ${{ matrix.service.name }} image..."
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          echo "Build Path: ${{ matrix.service.path }}"
          echo "Dockerfile: ${{ matrix.service.dockerfile }}"
          
          # Build the Docker image
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f ${{ matrix.service.dockerfile }} \
            ${{ matrix.service.path }}
          
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "Successfully pushed ${{ matrix.service.name }} image to ECR"
          echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Verify image in ECR
        run: |
          echo "Verifying ${{ matrix.service.ecr_repo }} image in ECR..."
          aws ecr describe-images \
            --repository-name ${{ matrix.service.ecr_repo }} \
            --region ${{ env.AWS_REGION }} \
            --query 'imageDetails[?imageTags[?contains(@, `latest`)]].{Digest:imageDigest,Size:imageSizeInBytes,PushedAt:imagePushedAt}' \
            --output table
