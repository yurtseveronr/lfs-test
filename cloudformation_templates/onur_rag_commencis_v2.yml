AWSTemplateFormatVersion: '2010-09-09'
Description: Full RAG Stack with Bedrock + Amazon Neptune Analytics + Auto Data Import

Parameters:
  DataSourceBucketName:
    Type: String
    Default: onur-s3-sink-connector-test-commencis
  DataSourcePrefix:
    Type: String
    Default: knowledge_base/
  CollectionName:
    Type: String
    Default: test
  EmbeddingModelArn:
    Type: String
    Default: arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0
  EnrichmentModelArn:
    Type: String
    Default: arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0

Resources:
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: bedrock-agent-role-v99
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: NeptuneAnalyticsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - neptune-graph:*
                  - aoss:ListCollections
                  - aoss:ListIndexes
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'

  # Step Functions için IAM Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CollectionName}-step-functions-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockIngestionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agent:StartIngestionJob
                  - bedrock-agent:GetIngestionJob
                  - bedrock-agent:ListIngestionJobs
                  - bedrock:StartIngestionJob
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # EventBridge için IAM Role
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CollectionName}-eventbridge-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref DataIngestionStateMachine

  NeptuneAnalyticsGraph:
    Type: AWS::NeptuneGraph::Graph
    DependsOn: BedrockAgentRole
    Properties:
      GraphName: !Sub "${CollectionName}-graph-v3"
      ProvisionedMemory: 16
      DeletionProtection: false
      PublicConnectivity: true
      ReplicaCount: 1
      VectorSearchConfiguration:
        VectorSearchDimension: 1024  

  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn:
      - BedrockAgentRole
      - NeptuneAnalyticsGraph
    Properties:
      Name: rag-kb
      RoleArn: !GetAtt BedrockAgentRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Ref EmbeddingModelArn
      StorageConfiguration:
        Type: NEPTUNE_ANALYTICS
        NeptuneAnalyticsConfiguration:
          GraphArn: !GetAtt NeptuneAnalyticsGraph.GraphArn
          FieldMapping:
            TextField: text
            MetadataField: metadata

  BedrockDataSource:
    Type: AWS::Bedrock::DataSource
    DependsOn:
      - BedrockAgentRole
      - BedrockKnowledgeBase        # ensure KB exists first
    Properties:
      Name: rag-kb-source-test
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Sub arn:aws:s3:::${DataSourceBucketName}
          InclusionPrefixes:
            - !Ref DataSourcePrefix
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens:         300
            OverlapPercentage: 20
        ContextEnrichmentConfiguration:
          Type: BEDROCK_FOUNDATION_MODEL
          BedrockFoundationModelConfiguration:
            ModelArn: !Ref EnrichmentModelArn
            EnrichmentStrategyConfiguration:
              Method: CHUNK_ENTITY_EXTRACTION

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    DependsOn:
      - BedrockDataSource      # ensure your KB + data source are ready first
    Properties:
      AgentName: !Sub "${CollectionName}-agent-test"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-micro-v1:0
      Description: "RAG assistant "
      Instruction: |
        You are a retrieval-augmented assistant. Use the knowledge base to answer user queries as helpfully as possible.
      AutoPrepare: true
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          KnowledgeBaseState: ENABLED
          Description: "RAG assistant "
      ActionGroups:                                 
        - ActionGroupName: AskUserAction
          ParentActionGroupSignature: AMAZON.UserInput
          ActionGroupState: ENABLED

  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    DependsOn: BedrockAgent
    Properties:
      AgentAliasName: !Sub "${CollectionName}-agent-alias-v2"
      AgentId: !Ref BedrockAgent
      Description: "Stable alias for agent"

  BedrockAgentCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn:
      - BedrockAgentAlias
    Properties:
      Name: !Sub "${CollectionName}-agent-creds-v2"
      Description: "Stores Bedrock Agent ARN and Alias ARN plus Data Source and Knowledge Base IDs"
      SecretString:
        Fn::Sub:
          - '{"BEDROCK_AGENT_ID":"${AgentArn}","BEDROCK_AGENT_ALIAS_ARN":"${AgentAliasArn}","DATA_SOURCE_ID":"${DataSourceId}","KNOWLEDGE_BASE_ID":"${KnowledgeBaseId}"}'
          - AgentArn: !GetAtt BedrockAgent.AgentArn
            AgentAliasArn: !GetAtt BedrockAgentAlias.AgentAliasArn
            DataSourceId: !GetAtt BedrockDataSource.DataSourceId
            KnowledgeBaseId: !Ref BedrockKnowledgeBase

  # Step Functions State Machine - Data Ingestion
  DataIngestionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${CollectionName}-data-ingestion-v2"
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Bedrock Knowledge Base Data Ingestion",
          "StartAt": "GetSecretValue",
          "States": {
            "GetSecretValue": {
              "Type": "Task",
              "Parameters": {
                "SecretId": "${CollectionName}-agent-creds-v2"
              },
              "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
              "ResultPath": "$.SecretResult",
              "Next": "ParseSecret"
            },
            "ParseSecret": {
              "Type": "Pass",
              "Parameters": {
                "ParsedSecret.$": "States.StringToJson($.SecretResult.SecretString)"
              },
              "Next": "StartIngestionJob"
            },
            "StartIngestionJob": {
              "Type": "Task",
              "Parameters": {
                "DataSourceId.$": "$.ParsedSecret.DATA_SOURCE_ID",
                "KnowledgeBaseId.$": "$.ParsedSecret.KNOWLEDGE_BASE_ID"
              },
              "Resource": "arn:aws:states:::aws-sdk:bedrockagent:startIngestionJob",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        }

  # EventBridge Rule - CloudFormation Stack durumunu izler
  SecretsManagerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${CollectionName}-secret-creation-rule"
      Description: "Triggers data ingestion when secret is created"
      EventPattern:
        source:
          - "aws.secretsmanager"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "secretsmanager.amazonaws.com"
          eventName:
            - "CreateSecret"
          requestParameters:
            name:
              - !Sub "${CollectionName}-agent-creds-v2"
      State: ENABLED
      Targets:
        - Arn: !Ref DataIngestionStateMachine
          Id: "TriggerIngestionOnSecretCreate"
          RoleArn: !GetAtt EventBridgeRole.Arn

Outputs:
  KnowledgeBaseId:
    Description: "Bedrock Knowledge Base ID"
    Value: !Ref BedrockKnowledgeBase
    Export:
      Name: !Sub "${AWS::StackName}-KnowledgeBaseId"
  
  DataSourceId:
    Description: "Bedrock Data Source ID"
    Value: !GetAtt BedrockDataSource.DataSourceId
    Export:
      Name: !Sub "${AWS::StackName}-DataSourceId"
  
  AgentId:
    Description: "Bedrock Agent ID"
    Value: !Ref BedrockAgent
    Export:
      Name: !Sub "${AWS::StackName}-AgentId"
  
  StateMachineArn:
    Description: "Step Functions State Machine ARN"
    Value: !Ref DataIngestionStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineArn"