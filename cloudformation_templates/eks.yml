AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Auto Mode — minimal permissions (Cluster: required 5, Node: minimal)'

Parameters:
  ClusterName:
    Type: String
    Default: onur-master-eks
  KubernetesVersion:
    Type: String
    Default: '1.31'
    AllowedValues: ['1.30','1.31']
  NetworkStackName:
    Type: String
    Default: network-stack

Resources:
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ClusterName} Cluster SG'
      VpcId: !ImportValue
        Fn::Sub: '${NetworkStackName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Cluster IAM Role — Auto Mode için gerekli managed policy seti (minimum “gereken”)
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-ClusterRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: eks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy

  # Node IAM Role — minimal (uygulama izinleri burada YOK; Pod Identity ile vereceksin)
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-NodeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy  
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # EKS Cluster — Auto Mode compute/network/storage enabled + NodeRoleArn verildi
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [ !Ref EKSClusterSecurityGroup ]
        SubnetIds:
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PublicSubnet1'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PublicSubnet2'
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
      ComputeConfig:
        Enabled: true
        NodeRoleArn: !GetAtt NodeRole.Arn
        NodePools: [ general-purpose, system ]
      KubernetesNetworkConfig:
        ElasticLoadBalancing: { Enabled: true }
      StorageConfig:
        BlockStorage: { Enabled: true }
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true

Outputs:
  ClusterName:
    Value: !Ref EKSCluster
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
  ClusterArn:
    Value: !GetAtt EKSCluster.Arn
  NodeRoleArn:
    Value: !GetAtt NodeRole.Arn
