AWSTemplateFormatVersion: '2010-09-09'
Description: 'Normal EKS Cluster with NodeGroups'
Parameters:
  ClusterName:
    Type: String
    Default: onur-master-eks
  KubernetesVersion:
    Type: String
    Default: '1.31'
    AllowedValues: ['1.30','1.31']
  NetworkStackName:
    Type: String
    Default: network-stack
Resources:
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ClusterName} Cluster SG'
      VpcId: !ImportValue
        Fn::Sub: '${NetworkStackName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Cluster IAM Role - Normal EKS için
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-ClusterRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: eks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  # Node IAM Role - NodeGroup için
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-NodeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # EKS Cluster - Normal mode
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [ !Ref EKSClusterSecurityGroup ]
        SubnetIds:
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PublicSubnet1'
          - !ImportValue
              Fn::Sub: '${NetworkStackName}-PublicSubnet2'
        EndpointPrivateAccess: true
        EndpointPublicAccess: true

  # Services NodeGroup - t3.xlarge (6 node)
  ServicesNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: services-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.xlarge]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      Labels:
        node-type: services

  # DevOps NodeGroup - t3.xlarge (4 node)
  DevOpsNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: devops-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.xlarge]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      Labels:
        node-type: devops

  # GitOps NodeGroup - t3.medium (1 node)
  GitOpsNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: gitops-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels:
        node-type: gitops

  # AI NodeGroup - t3.medium (1 node)
  AINodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: ai-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels:
        node-type: ai

  # Recommendation NodeGroup - t3.medium (1 node)
  RecommendationNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: recommendation-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 1
      Labels:
        node-type: recommendation

  # Streaming NodeGroup - t3.medium (2 node)
  StreamingNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: streaming-nodegroup
      NodeRole: !GetAtt NodeRole.Arn
      Subnets:
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
        - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
      InstanceTypes: [t3.medium]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 2
      Labels:
        node-type: streaming

Outputs:
  ClusterName:
    Value: !Ref EKSCluster
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
  ClusterArn:
    Value: !GetAtt EKSCluster.Arn
  NodeRoleArn:
    Value: !GetAtt NodeRole.Arn