AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Auto Mode Cluster - No NodeGroups Required'

Parameters:
  ClusterName:
    Type: String
    Default: 'onur-master-eks'

  KubernetesVersion:
    Type: String
    Default: '1.31'  # Auto Mode requires 1.30+
    AllowedValues:
      - '1.30'
      - '1.31'
    Description: 'Auto Mode requires Kubernetes 1.30 or later'

  NetworkStackName:
    Type: String
    Default: 'network-stack'

Resources:
##############################################
# Security Groups (Simplified for Auto Mode)
##############################################
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ClusterName} Cluster SG'
      VpcId: !ImportValue
        Fn::Sub: '${NetworkStackName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-ClusterSG'

##############################################
# IAM Roles
##############################################
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-ClusterRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-ClusterRole'

  # Node Role (EKS will assign this to EC2 instances)
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-NodeRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-NodeRole'

##############################################
# EKS Auto Mode Cluster
##############################################
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet1'
          - !ImportValue
            Fn::Sub: '${NetworkStackName}-PrivateSubnet2'
          - !ImportValue
            Fn::Sub: '${NetworkStackName}-PublicSubnet1'
          - !ImportValue
            Fn::Sub: '${NetworkStackName}-PublicSubnet2'
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        PublicAccessCidrs:
          - 0.0.0.0/0
      # AUTO MODE CONFIGURATION
      ComputeConfig:
        Enabled: true
        NodeRoleArn: !GetAtt NodeRole.Arn
      StorageConfig:
        BlockStorage:
          Enabled: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Tags:
        - Key: Name
          Value: !Ref ClusterName
        - Key: Mode
          Value: 'Auto'

##############################################
# OIDC Provider (Auto Mode still needs this)
##############################################
  EKSClusterOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280

##############################################
# Outputs
##############################################
Outputs:
  ClusterName:
    Value: !Ref EKSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-ClusterEndpoint'

  ClusterArn:
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  ClusterSecurityGroupId:
    Value: !Ref EKSClusterSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ClusterSecurityGroupId'

  OIDCIssuerURL:
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
    Export:
      Name: !Sub '${AWS::StackName}-OIDCIssuerURL'

  NodeRoleArn:
    Value: !GetAtt NodeRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NodeRoleArn'